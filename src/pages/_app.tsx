import "@/styles/globals.css";
import {
  Address,
  Blockfrost,
  Lucid,
  MintingPolicy,
  PolicyId,
  SpendingValidator,
  Unit,
  UTxO,
} from "lucid-cardano";
import type { AppProps } from "next/app";
import {
  createContext,
  Dispatch,
  SetStateAction,
  useEffect,
  useState,
} from "react";
import WalletSelectorModal, { Wallet } from '@/components/WalletSelectorModal';

export const alwaysTrueScript: SpendingValidator = {
  type: "PlutusV2",
  script: "49480100002221200101",
};

export const alwaysFalseScript: SpendingValidator = {
  type: "PlutusV2",
  script: "4746010000222601",
};

export const checkDateBeforeScript: SpendingValidator = {
  type: "PlutusV2",
  script: "59078259077f010000323232323232323232323232323232323232323232323232323232323232323232323232222323253355335353553335734604a6aae740084c8c8c8c848cc00400c008c04cd5d09aba200353335734604e6aae740044c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c848cccccccccccc00406005805004804003803002401c01400c008c0ccd5d09aba200233302475c40026ae84004d5d100119981101310009aba10013574400466042eb8d5d08009aba200353335734606e6aae740044c8c8c8cc0d14ccd5cd181d1aab9d002132330353301d75a6ae84004c070d5d09aba200135573c004072a666ae68c0e8d55ce8008991981a9980ebad3574200260386ae84d5d10009aab9e00103937546ae84d5d10011baa357420026aae780040d8dd51aba100135744004666036046eb4d5d08009aba20023301a01f357420026ae88008ccc05dd700b1aba10013574400466602aeb8050d5d08009aba200233014010357420026ae88008cc048034d5d08009aba20023301000b357420026aae78004098dd51aba100135573c00404844004444444444444a66a6a00a446a00444a666a66604604e60600220042a66a002266604204e006052266604204e006052056266604204e00605204e05a042266ae71240110446561646c696e6520726561636865640002311200116375a0086ea80048c94ccd5cd181100080e8a999ab9a302100101702035573a6ea800488c8c94ccd5cd181200080d8a999ab9a30230011301d3004357426aae7800854ccd5cd181100080d0109aab9d0013754002464a666ae68c07cd55ce8008991919091980080180118029aba13574400460266ae84004d55cf00080f1baa00123253335734603c6aae740044c8c8c8c8c8c8c8c8c8c848cccc00402401c00c008cc031d71aba135744008a666ae68c0a00044c84888c008010d5d09aab9e002153335734604e002264244460020086eb8d5d09aab9e002153335734604c00203a04a6aae74004dd51aba100135744004666012eb8020d5d08009aba20035333573460406aae740044c8c8c848cc00400c008cc01c044d5d09aba20023012357420026aae7800407cdd51aba100135573c00203a6ea800488c8c94ccd5cd180f800899091180100198021aba135573c0042a666ae68c080004054078d55ce8009baa0013300175ceb4888cc08088cccd55cf800900e119191919806091980080180118031aba2005300735573c004600e6aae74004d5d08010039bab001223301e2233335573e002403446600e600a6ae84008c00cd5d10010029bac0011200122122330010040032323253335734603600226424444600800a600a6ae84d55cf0010a999ab9a301a0011321222230020053007357426aae7800854ccd5cd180c80089909111180080298059aba135573c0042a666ae68c0600044c848888c00c014dd71aba135573c00402e6aae74004dd50009111a801111a801912999a9998048038020010a99a801880080b80880b91919192999ab9a3370e90060010891111110018a999ab9a3370e90050010891111110020a999ab9a3370e90040010991909111111198008048041bad357426ae894008dd71aba1500115333573460340042646424444444660040120106eb8d5d09aba25002375c6ae85400454ccd5cd180c8010991909111111198030048041bae357426ae894008c018d5d0a8008a999ab9a30180021321222222230070083006357426aae7800c54ccd5cd180b80109909111111180280418031aba135573c00602c26aae78008d55ce8009baa0012223253335003215333500321533350052130044984c00d261533350042130044984c00d2600f00f1533350042130034984c009261533350032130034984c0092600e153335002201000d00f15333500221533350042130034984c009261533350032130034984c0092600e00e1533350032130024984c005261533350022130024984c0052600d253335002215333500421533350042133300900700200116161600f15333500321533350032133300800600200116161600e00f2323253335734602a0022646464646424466600200c0080066eb4d5d09aba2002375a6ae84004d5d10011bad357420026aae7800854ccd5cd180a000899091180100198029aba135573c0040266aae74004dd500091a80091111111003919192999ab9a30130011321223001003375c6ae84d55cf0010a999ab9a30120011321223002003375c6ae84d55cf0010089aab9d0013754002246666666600244666ae68cdc3801000807007912999ab9a3370e0040020102a666ae68cdc480100080500491199ab9a3371000400201c01e44666ae68cdc480100080700791199ab9a3371200400201e01c44666ae68cdc4001000807807112999ab9a337120040022002200444a666ae68cdc4801000880108009192999ab9a300f35573a002264646424660020060046eb4d5d09aba20023005357420026aae78004038dd50009980309110008049192999ab9a300d35573a00226eb8d5d09aab9e00100c3754002201022444006224440042244400244246600200600442444600600820022440042440022a66ae712401035054310016370e90001b8748008dc3a40086e1d200623230010012233003300200200101",
};

export const checkDateAfterScript: SpendingValidator = {
  type: "PlutusV2",
  script: "59078159077e010000323232323232323232323232323232323232323232323232323232323232323232323232222323253355335353553335734604a6aae740084c8c8c8c848cc00400c008c04cd5d09aba200353335734604e6aae740044c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c848cccccccccccc00406005805004804003803002401c01400c008c0ccd5d09aba200233302475c40026ae84004d5d100119981101310009aba10013574400466042eb8d5d08009aba200353335734606e6aae740044c8c8c8cc0d14ccd5cd181d1aab9d002132330353301d75a6ae84004c070d5d09aba200135573c004072a666ae68c0e8d55ce8008991981a9980ebad3574200260386ae84d5d10009aab9e00103937546ae84d5d10011baa357420026aae780040d8dd51aba100135744004666036046eb4d5d08009aba20023301a01f357420026ae88008ccc05dd700b1aba10013574400466602aeb8050d5d08009aba200233014010357420026ae88008cc048034d5d08009aba20023301000b357420026aae78004098dd51aba100135573c004048440044444444444446a00a446a00444a666a66604604e60600220042a66a002266604204e006052266604204e006052056266604204e006052042266ae71240114446561646c696e65206e6f7420726561636865640002311200116375a0086ea80048c94ccd5cd181100080e8a999ab9a302100101702035573a6ea800488c8c94ccd5cd181200080d8a999ab9a30230011301d3004357426aae7800854ccd5cd181100080d0109aab9d0013754002464a666ae68c07cd55ce8008991919091980080180118029aba13574400460266ae84004d55cf00080f1baa00123253335734603c6aae740044c8c8c8c8c8c8c8c8c8c848cccc00402401c00c008cc031d71aba135744008a666ae68c0a00044c84888c008010d5d09aab9e002153335734604e002264244460020086eb8d5d09aab9e002153335734604c00203a04a6aae74004dd51aba100135744004666012eb8020d5d08009aba20035333573460406aae740044c8c8c848cc00400c008cc01c044d5d09aba20023012357420026aae7800407cdd51aba100135573c00203a6ea800488c8c94ccd5cd180f800899091180100198021aba135573c0042a666ae68c080004054078d55ce8009baa0013300175ceb4888cc08088cccd55cf800900e119191919806091980080180118031aba2005300735573c004600e6aae74004d5d08010039bab001223301e2233335573e002403446600e600a6ae84008c00cd5d10010029bac0011200122122330010040032323253335734603600226424444600800a600a6ae84d55cf0010a999ab9a301a0011321222230020053007357426aae7800854ccd5cd180c80089909111180080298059aba135573c0042a666ae68c0600044c848888c00c014dd71aba135573c00402e6aae74004dd50009111a801111a801912999a9998048038020010a99a801880080b80880b91919192999ab9a3370e90060010891111110018a999ab9a3370e90050010891111110020a999ab9a3370e90040010991909111111198008048041bad357426ae894008dd71aba1500115333573460340042646424444444660040120106eb8d5d09aba25002375c6ae85400454ccd5cd180c8010991909111111198030048041bae357426ae894008c018d5d0a8008a999ab9a30180021321222222230070083006357426aae7800c54ccd5cd180b80109909111111180280418031aba135573c00602c26aae78008d55ce8009baa0012223253335003215333500321533350052130044984c00d261533350042130044984c00d2600f00f1533350042130034984c009261533350032130034984c0092600e153335002201000d00f15333500221533350042130034984c009261533350032130034984c0092600e00e1533350032130024984c005261533350022130024984c0052600d253335002215333500421533350042133300900700200116161600f15333500321533350032133300800600200116161600e00f2323253335734602a0022646464646424466600200c0080066eb4d5d09aba2002375a6ae84004d5d10011bad357420026aae7800854ccd5cd180a000899091180100198029aba135573c0040266aae74004dd500091a80091111111003919192999ab9a30130011321223001003375c6ae84d55cf0010a999ab9a30120011321223002003375c6ae84d55cf0010089aab9d0013754002246666666600244666ae68cdc3801000807007912999ab9a3370e0040020102a666ae68cdc480100080500491199ab9a3371000400201c01e44666ae68cdc480100080700791199ab9a3371200400201e01c44666ae68cdc4001000807807112999ab9a337120040022002200444a666ae68cdc4801000880108009192999ab9a300f35573a002264646424660020060046eb4d5d09aba20023005357420026aae78004038dd50009980309110008049192999ab9a300d35573a00226eb8d5d09aab9e00100c3754002201022444006224440042244400244246600200600442444600600820022440042440022a66ae712401035054310016370e90001b8748008dc3a40086e1d200623230010012233003300200200101",
};

export const checkSignatureScript: SpendingValidator = {
  type: "PlutusV2",
  script: "59064259063f01000032323232323232323232323232323232323232323232323232323232222323253355335353553335734603a6aae740084c8c8c8c848cc00400c008c04cd5d09aba200353335734603e6aae740044c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c848cccccccccccc00406005805004804003803002401c01400c008c0b8d5d09aba200233302475c40026ae84004d5d100119981101310009aba10013574400466042eb8d5d08009aba200353335734605e6aae740044c8c8c8c8c848cc0040100094ccd5cd18199aab9d00113232321233001003002301e357426ae88008cc079d69aba100135573c0020646ea8d5d09aba20035333573460626aae740044c8c8c848cc00400c008c070d5d09aba20023301c75a6ae84004d55cf0008181baa357420026aae780040b8dd51aba100135744004666036042eb4d5d08009aba20023301a01e357420026ae88008ccc05dd700b1aba10013574400466602aeb8050d5d08009aba200233014010357420026ae88008cc048034d5d08009aba20023301000b357420026aae78004078dd51aba100135573c004038034444444444444a66a666aa6605a4422444a66a00226a00644002442666a00a05a6008004666aa600e05200a008002044246600244a66a0044200620020504a666ae68cdc780700089812800812002101301180c899ab9c49011f42656e65666963696172792773207369676e6174757265206d697373696e670001b11200116375c0086ea80048c94ccd5cd180d00080a8a999ab9a301900101301835573a6ea800488c8c94ccd5cd180e000889110008a999ab9a301b001132122230030043004357426aae7800854ccd5cd180d0008891100100c9aab9d0013754002464a666ae68c05cd55ce8008991919091980080180118029aba135744004601e6ae84004d55cf00080b1baa00123253335734602c6aae740044c8c8c8c8c8c8c8c8c8c848cccc00402401c00c008cc031d71aba135744008a666ae68c0800044c84888c008010d5d09aab9e002153335734603e002264244460020086eb8d5d09aab9e002153335734603c0022244400603a6aae74004dd51aba100135744004666012eb8020d5d08009aba20035333573460306aae740044c8c8c848cc00400c008cc01c03cd5d09aba2002300f357420026aae7800405cdd51aba100135573c00202a6ea800488c8c94ccd5cd180b8008980918021aba135573c0042a666ae68c060004044058d55ce8009baa0013300175ceb4888cc06088cccd55cf8009004119191919806091980080180118031aba2005300735573c004600e6aae74004d5d08010079bab00122330162233335573e002400c46600e600a6ae84008c00cd5d10010069bac001100c22122330010040032323253335734602600226424444600800a60086ae84d55cf0010a999ab9a30120011321222230020053005357426aae7800854ccd5cd180880089909111180080298039aba135573c0042a666ae68c0400044c848888c00c014dd71aba135573c00401e6aae74004dd500091919192999ab9a3370e90060010891111110018a999ab9a3370e90050010891111110020a999ab9a3370e90040010991909111111198008048041bad357426ae894008dd71aba1500115333573460260042646424444444660040120106eb8d5d09aba25002375c6ae85400454ccd5cd18090010991909111111198030048041bae357426ae894008c014d5d0a8008a999ab9a30110021321222222230070083005357426aae7800c54ccd5cd180800109909111111180280418029aba135573c00601e26aae78008d55ce8009baa0012323253335734601e0022646464646424466600200c0080066eb4d5d09aba2002375a6ae84004d5d10011bad357420026aae7800854ccd5cd1807000899091180100198021aba135573c00401a6aae74004dd5000919192999ab9a300e0011321223001003375c6ae84d55cf0010a999ab9a300d0011321223002003375c6ae84d55cf0010061aab9d0013754002464a666ae68c02cd55ce800899191909198008018011bad357426ae88008c010d5d08009aab9e00100a3754002464a666ae68c028d55ce80089bae357426aae78004024dd50008900088021091180100188800910010910008a99ab9c491035054310016370e90001b8748008dc3a40086e1d200623230010012233003300200200101",
};

export type ContractType = "validator" | "policy" | "undefined";
export type ContractClass =
  | "alwaysTrue"
  | "alwaysFalse"
  | "checkDate"
  | "checkSignature"
  | "FT"
  | "NFT";

export type AppState = {
  // Global
  lucid?: Lucid;
  wAddr?: Address;
  contractType?: ContractType;
  contractClass?: ContractClass;
  //Address
  alwaysTrueAddress?: Address;
  alwaysFalseAddress?: Address;
  checkDateAfterAddress?: Address;
  checkDateBeforeAddress?: Address;
  checkSignatureAddress?: Address;
  // Check Signature Policy
  tokenCheckDateNameHex?: string;
  tokenCheckDateBeforeIdHex?: PolicyId;
  tokenCheckDateBeforeAssetClassHex?: Unit;
  tokenCheckDateBeforePolicy?: MintingPolicy;

  tokenCheckDateAfterIdHex?: PolicyId;
  tokenCheckDateAfterAssetClassHex?: Unit;
  tokenCheckDateAfterPolicy?: MintingPolicy;
  // Check Signature Policy
  tokenSignatureIdHex?: PolicyId;
  tokenSignatureNameHex?: string;
  tokenSignatureAssetClassHex?: Unit;
  tokenSignaturePolicy?: MintingPolicy;
  // NFT Policy
  nftPolicyIdHex?: PolicyId;
  nftTokenNameHex?: string;
  nftAssetClassHex?: Unit;
  nftPolicy?: MintingPolicy;
  UTxOToClaim?: UTxO;
  UnlockUTxORef?: string;
};

const initialAppState: AppState = {
  contractType: "undefined",
  contractClass: "alwaysTrue",
};

export const AppStateContext = createContext<{
  appState: AppState;
  setAppState: Dispatch<SetStateAction<AppState>>;
}>({ appState: initialAppState, setAppState: () => { } });

export default function App({ Component, pageProps }: AppProps) {
  const [appState, setAppState] = useState<AppState>(initialAppState);
  const [showWalletModal, setShowWalletModal] = useState(false);

  const connectLucid = async (wallet: any) => {
    const lucid = await Lucid.new(
      new Blockfrost(
        "https://cardano-preview.blockfrost.io/api/v0",
        process.env.BLOCKFROST_PREVIEW,
      ),
      "Preview",
    );
    
    lucid.selectWallet(wallet);
    setAppState({
      ...initialAppState,
      lucid: lucid,
      wAddr: await lucid.wallet.address(),

      alwaysTrueAddress: lucid.utils.validatorToAddress(alwaysTrueScript),
      alwaysFalseAddress: lucid.utils.validatorToAddress(alwaysFalseScript),
      checkDateBeforeAddress: lucid.utils.validatorToAddress(checkDateBeforeScript),
      checkDateAfterAddress: lucid.utils.validatorToAddress(checkDateAfterScript),
      checkSignatureAddress: lucid.utils.validatorToAddress(checkSignatureScript),
    });
  };

  const handleWalletSelect = async (wallet: Wallet) => {
    try {
      if (wallet.enable) {
        const api = await wallet.enable();
        await connectLucid(api);
        setShowWalletModal(false);
      }
    } catch (error) {
      console.error("Failed to connect wallet:", error);
      // You might want to show an error message to the user here
    }
  };
  
  useEffect(() => {
    if (appState.lucid) return;
    setShowWalletModal(true);
  }, [appState]);

  return (
    <AppStateContext.Provider value={{ appState, setAppState }}>
      {showWalletModal && (
        <WalletSelectorModal
          onSelect={handleWalletSelect}
          onClose={() => setShowWalletModal(false)}
        />
      )}
      <Component {...pageProps} />
    </AppStateContext.Provider>
  );
}

